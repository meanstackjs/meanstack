// Generated by CoffeeScript 1.7.1
var chalk, commander, dirname, fs, init, minimal, name, path, shelljs, source, _;

commander = require('commander');

shelljs = require('shelljs');

chalk = require('chalk');

fs = require('fs');

path = require('path');

_ = require('lodash');

init = function(dirname, name, minimal, cb) {
  var file;
  file = path.resolve(path.join(process.cwd(), dirname, 'package.json'));
  return fs.readFile(file, function(err, data) {
    var json;
    if (err) {
      return cb(err);
    }
    try {
      json = JSON.parse(data.toString());
      json.name = name;
      if (minimal) {
        delete json.dependencies['express-session'];
        delete json.dependencies['express-validator'];
        delete json.dependencies['connect-mongo'];
        delete json.dependencies['connect-flash'];
        delete json.dependencies['compression'];
        delete json.dependencies['body-parser'];
        delete json.dependencies['cookie-parser'];
        delete json.dependencies['method-override'];
        delete json.dependencies['serve-favicon'];
        delete json.dependencies['view-helpers'];
        delete json.dependencies['errorhandler'];
      }
      return fs.writeFile(file, JSON.stringify(json, null, 2), function(err) {
        if (err) {
          return cb(err);
        }
        file = path.resolve(path.join(process.cwd(), dirname, '.bowerrc'));
        return fs.readFile(file, function(err, data) {
          var bower;
          if (err) {
            return cb(err);
          }
          bower = JSON.parse(data.toString());
          bower.directory = "public/" + name + "/vendor/";
          return fs.writeFile(file, JSON.stringify(bower, null, 2), function(err) {
            if (err) {
              return cb(err);
            }
            return cb(null, json);
          });
        });
      });
    } catch (_error) {
      err = _error;
      return cb(err);
    }
  });
};

commander.description('init new project with provided dirname');

commander.usage('[options] <dirname>');

commander.option('-n, --name <name>', 'specify project name');

commander.option('-m, --minimal', 'init with minimal dependencies');

commander.option('-b, --branch <branch>', 'specify git branch');

commander.option('-p, --buildpack <buildpack>', 'specify buildpack');

commander.option('-g, --git', 'close using git instead of https');

commander.option('-r, --repository <repository>', 'specify specific repository to install');

commander.parse(process.argv);

if (commander.args.length < 1) {
  console.log();
  console.log(chalk.yellow('  Please specify directory name'));
  commander.help();
  process.exit(0);
} else {
  dirname = commander.args[0];
}

if (commander.name == null) {
  name = dirname;
} else {
  name = commander.name;
}

if (commander.minimal == null) {
  minimal = false;
} else {
  minimal = true;
}

if (commander.branch == null) {
  commander.branch = 'master';
}

if (!shelljs.which('git')) {
  console.log(chalk.red('Prerequisite not installed: git'));
  console.log();
  process.exit(0);
}

if (!commander.buildpack) {
  commander.buildpack = 'coffee';
}

if (commander.git != null) {
  source = "git@github.com:meanstackjs/meanstack-skeleton-" + commander.buildpack + ".git";
} else {
  source = "https://github.com/meanstackjs/meanstack-skeleton-" + commander.buildpack + ".git";
}

if (commander.repository != null) {
  source = commander.repository;
}

source = "" + commander.branch + " " + source + " " + dirname;

console.log();

console.log(chalk.green("Cloning branch " + commander.branch + " into " + dirname));

shelljs.exec("git clone -b " + source, function(err) {
  if (err) {
    console.log();
    console.log(chalk.red('Error: git clone failed'));
    console.log();
    return;
  }
  return init(dirname, name, minimal, function(err, data) {
    if (err) {
      console.log(chalk.yellow('Something went wrong. Try again or use --git flag'));
      console.log(chalk.yellow('If the problem persists see past issues at https://github.com/meanstackjs/meanstack/issues'));
      console.log(chalk.yellow('Or open a new issue here https://github.com/meanstackjs/meanstack/issues/new'));
      console.log();
      process.exit(0);
    }
    console.log();
    console.log(chalk.green("Version " + data.version + " cloned"));
    console.log();
    shelljs.cd(dirname);
    shelljs.exec('git remote remove origin', function(err) {
      if (err) {
        console.log('Unable to remove git remote origin');
        return console.log();
      }
    });
    console.log('Install dependencies:');
    console.log("  cd " + dirname + " && npm install");
    console.log();
    console.log('Run app in development mode (development environment):');
    console.log('  grunt develop');
    console.log('Run app in debugging mode (development environment):');
    console.log('  grunt debug');
    console.log('Run app in preview mode (production environment):');
    console.log('  grunt preview');
    console.log('Start app in production mode (production environment):');
    console.log('  node server.js');
    return console.log();
  });
});

console.log();
